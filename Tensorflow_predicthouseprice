{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/10691deepak/courses/blob/master/Tensorflow_predicthouseprice\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "jNLTbMUFKxl6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1941
        },
        "outputId": "8c695195-4509-4152-a757-7e207deef36c"
      },
      "cell_type": "code",
      "source": [
        "# House Price Predictipon model\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import math\n",
        "\n",
        "num_house=100\n",
        "train_data_num = math.floor(num_house * 0.8)\n",
        "house_plinth_area = [1360, 1794, 1630, 1595, 2138, 2669, 966, 1738, 830, 1982, \n",
        "                     2635, 3419, 630, 2185, 1269, 2891, 2015, 3353, 2933, 1715,\n",
        "                     1455, 2824, 1684, 959, 521, 2800, 1247, 3404, 974, 1582, \n",
        "                     3058, 2547, 3247, 1475, 2306, 689, 3234, 1062, 2399, 1767, \n",
        "                     3379, 2028, 1146, 2568, 3388, 2714, 1797, 2935, 1100, 2863,\n",
        "                     2561, 741, 2541, 3324, 3112, 3445, 1863, 2639, 1890, 1978,\n",
        "                     3056, 1275, 534, 2753, 2455, 2085, 1521, 3113, 1629, 2000,\n",
        "                     1202, 2949, 3277, 2079, 661, 701, 2481, 1495, 2817, 1315,\n",
        "                     955, 1775, 1516, 2843, 3267, 837, 1378, 1576, 1291, 2764, \n",
        "                     1263, 2735, 879, 992, 1680, 2562, 564, 3068, 1867, 1652]\n",
        "\n",
        "house_land_area = [4844, 9060, 2567, 6085, 8628, 5646, 3606, 9541, 3443, 9971,\n",
        "                   8891, 1451, 1338, 6247, 5857, 2330, 926, 7384, 1188, 6354, \n",
        "                   1972, 1284, 8136, 7728, 4704, 3646, 9671, 2605, 3098, 3543, \n",
        "                   4094, 2701, 8196, 4653, 9013, 6371, 7940, 3211, 6236, 5210, \n",
        "                   7773, 6219, 8484, 6400, 2651, 7456, 9794, 7662, 631, 8128, \n",
        "                   7378, 5375, 4706, 4606, 8426, 517, 1879, 4080, 8616, 5424, \n",
        "                   1032, 6072, 9606, 1161, 2077, 6656, 9619, 9810, 1891, 6137, \n",
        "                   8257, 932, 4820, 4233, 3037, 3125, 1025, 3313, 1269, 4046, \n",
        "                   5826, 8508, 6875, 603, 1873, 738, 6747, 6555, 8005, 6004, \n",
        "                   8116, 7259, 8402, 9386, 1095, 966, 1987, 5074, 3977, 4454]\n",
        "\n",
        "house_furnish_area = [748, 868, 1304, 1276, 1710, 1550, 772, 1390, 664, 1779, \n",
        "                      699, 1451, 504, 2151, 1015, 2312, 1761, 2330, 926, 1372,\n",
        "                      1188, 2258, 1347, 767, 416, 2512, 997, 2931, 779, 1265, \n",
        "                      2446, 2037, 1598, 1180, 826, 551, 2015, 557, 821, 1413, \n",
        "                      862, 620, 916, 2140, 2709, 1114, 1437, 2304, 880, 2290, \n",
        "                      2105, 592, 1602, 2996, 2397, 2808, 631, 2111, 1269, 1582, \n",
        "                      1279, 610, 427, 510, 1964, 1668, 517, 1879, 974, 1600, \n",
        "                      961, 1032, 1884, 1976, 528, 560, 1414, 1196, 1161, 1052, \n",
        "                      764, 1420, 1427, 1618, 1891, 669, 804, 932, 724, 2211, \n",
        "                      1010, 1071, 703, 793, 990, 2049, 451, 597, 1493, 1321] \n",
        "\n",
        "house_price = [533229, 897934, 413911, 673635, 937581, 759703, 401639, 951663, \n",
        "               370620, 1025632, 962271, 515623, 186465, 783657, 611734, 567838,\n",
        "               350429, 993951, 424185, 710024, 347147, 479840, 839222, 710209, \n",
        "               424089, 666585, 894704, 667369, 364771, 480813, 722898, 549215, \n",
        "               1011215, 549613, 944127, 571420, 1009772, 372231, 744426, 631110,\n",
        "               959538, 696988, 791701, 833454, 659892, 881150, 978951, 972199, \n",
        "               197123, 998770, 904423, 503918, 678992, 812295, 1050673, 509884, \n",
        "               355494, 665155, 892011, 675323, 440378, 609985, 792577, 385310, \n",
        "               489431, 782605, 896425, 1131993, 348238, 732505, 783119, 411275, \n",
        "               774043, 614330, 317897, 329657, 388940, 451658, 429223, 482731, \n",
        "               566892, 879701, 731290, 402829, 552453, 168746, 679638, 690746, \n",
        "               761605, 826176, 780908, 866146, 750009, 838817, 294429, 420931, \n",
        "               225706, 714114, 552615, 558755]\n",
        " \n",
        "# Split the data into Training Data (80%) and Test Data (20%)\n",
        "train_data_num = math.floor(num_house * 0.8)\n",
        "\n",
        "train_house_plinth_area = np.asarray(house_plinth_area[:train_data_num])\n",
        "train_house_land_area = np.asarray(house_land_area[:train_data_num])\n",
        "train_house_furnish_area = np.asarray(house_plinth_area[:train_data_num])\n",
        "train_house_price = np.asarray(house_price[:train_data_num])\n",
        "\n",
        "test_house_plinth_area = np.asarray(house_plinth_area[train_data_num:])\n",
        "test_house_land_area = np.asarray(house_land_area[train_data_num:])\n",
        "test_house_furnish_area = np.asarray(house_furnish_area[train_data_num:])\n",
        "test_house_price = np.asarray(house_price[train_data_num:])\n",
        "\n",
        "# Normalization of Data\n",
        "\n",
        "def normalize(array):\n",
        "  return (array - array.mean())/array.std()\n",
        "\n",
        "train_n_house_plinth_area = normalize(train_house_plinth_area)\n",
        "train_n_house_land_area = normalize(train_house_land_area)\n",
        "train_n_house_furnish_area = normalize(train_house_furnish_area)\n",
        "train_n_house_price = normalize(train_house_price)\n",
        "\n",
        "test_n_house_plinth_area = normalize(test_house_plinth_area)\n",
        "test_n_house_land_area = normalize(test_house_land_area)\n",
        "test_n_house_furnish_area = normalize(test_house_furnish_area)\n",
        "test_n_house_price = normalize(test_house_price)\n",
        "\n",
        "# See what are in the Normalized Training Data\n",
        "\n",
        "print(\"Number of data points in Normalized Training Data House Plinth Area  \", len(train_n_house_plinth_area))\n",
        "print(\"Number of data points in Normalized Training Data House Land Area  \", len(train_n_house_land_area))\n",
        "print(\"Number of data points in Normalized Training Data House Furnish Area  \", len(train_n_house_furnish_area))\n",
        "print(\"Number of data points in Normalized Training Data House price  \", len(train_n_house_price))\n",
        "print(\" Normalized Training Data for House Plinth Area .. \")\n",
        "print(train_n_house_plinth_area)\n",
        "print(\" Normalized Training Data for House Land Area .. \")\n",
        "print(train_n_house_land_area)\n",
        "print(\" Normalized Training Data for House Furnish Area .. \")\n",
        "print(train_n_house_furnish_area)\n",
        "print(\" Normalized Training Data for House Price .. \")\n",
        "print(train_n_house_price)\n",
        "\n",
        "\n",
        "# See what are in the Normalized test Data\n",
        "\n",
        "print(\"Number of data points in Normalized Test Data House Plinth Area  \", len(test_n_house_plinth_area))\n",
        "print(\"Number of data points in Normalized Test Data House Land Area  \", len(test_n_house_land_area))\n",
        "print(\"Number of data points in Normalized Test Data House Furnish Area  \", len(test_n_house_furnish_area))\n",
        "print(\"Number of data points in Normalized Test Data House price  \", len(test_n_house_price))\n",
        "print(\" Normalized Test Data for House Plinth Area .. \")\n",
        "print(test_n_house_plinth_area)\n",
        "print(\" Normalized Test Data for House Land Area .. \")\n",
        "print(test_n_house_land_area)\n",
        "print(\" Normalized Test Data for House Furnish Area .. \")\n",
        "print(test_n_house_furnish_area)\n",
        "print(\" Normalized Test Data for House Price .. \")\n",
        "print(test_n_house_price)\n",
        "\n",
        "#1 Define placeholders\n",
        "tf_x1 = tf.placeholder(\"float\", name=\"house_plinth_area\") \n",
        "tf_x2 = tf.placeholder(\"float\", name=\"house_land_area\") \n",
        "tf_x3 = tf.placeholder(\"float\", name=\"house_furnish_area\") \n",
        "tf_y = tf.placeholder(\"float\", name = \"house_price\")\n",
        "\n",
        "tf_beta1 = tf.Variable(np.random.randn(), name = \"beta1\")\n",
        "tf_beta2 = tf.Variable(np.random.randn(), name = \"beta2\")\n",
        "tf_beta3 = tf.Variable(np.random.randn(), name = \"beta3\")\n",
        "tf_beta0 = tf.Variable(np.random.randn(), name = \"beta0\")\n",
        "                               \n",
        "\n",
        "# 2. Inference - Predicting the house price from the size of the house\n",
        "tf_price_pred = tf.add(tf_beta0, tf.add(tf.add(tf.multiply(tf_beta1, tf_x1),\\\n",
        "       tf.multiply(tf_beta2, tf_x2)), tf.multiply(tf_beta3, tf_x3)))\n",
        "\n",
        "#3. Define the loss function Mean Square\n",
        "tf_error = tf.reduce_sum(tf.pow((tf_price_pred - tf_y),2)/(2*train_data_num))\n",
        "\n",
        "# 4 Optimizer Learning Rate\n",
        "learning_rate = 0.1\n",
        "\n",
        "# 5. Define Gradient Descent optimizer\n",
        "optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(tf_error)\n",
        "#Initializing the variables\n",
        "init = tf.global_variables_initializer()\n",
        "\n",
        "#Launch Dataflow Graph in the session\n",
        "\n",
        "sess = tf.Session()\n",
        "sess.run(init)\n",
        "  \n",
        "display_every = 200\n",
        "num_training_iter = 1000\n",
        "for iteration in range(num_training_iter):\n",
        "    \n",
        "  for (x1, x2, x3, y) in zip(train_n_house_plinth_area, train_n_house_land_area, train_n_house_furnish_area, train_n_house_price):\n",
        "    sess.run(optimizer, feed_dict = {tf_x1 : x1, tf_x2 : x2, tf_x3 : x3, tf_y : y})\n",
        "      \n",
        "  # Display Current status\n",
        "  if (iteration + 1) % display_every == 0:\n",
        "    train_error = sess.run(tf_error, feed_dict = {tf_x1 : x1, tf_x2 : x2, tf_x3 : x3, tf_y : y})\n",
        "    print(\"iteration#\", '%04d' % (iteration +1) , \"Train Error.. = \", \"{: .9f}\".format(train_error), \\\n",
        "          \"  B0 \", sess.run(tf_beta0), \"  B1 \", sess.run(tf_beta1), \"  B2 \", sess.run(tf_beta2), \"  B3 \", sess.run(tf_beta3)) \n",
        "    \n",
        "print (\" Final Values\" \"  B0 \", sess.run(tf_beta0), \"  B1 \", sess.run(tf_beta1), \"  B2 \", sess.run(tf_beta2), \"  B3 \", sess.run(tf_beta3))\n",
        "\n",
        "\n",
        "beta0 = sess.run(tf_beta0)\n",
        "beta1 = sess.run(tf_beta1)\n",
        "beta2 = sess.run(tf_beta2)\n",
        "beta3 = sess.run(tf_beta3)\n",
        "print (\" Final Values\" \"  B0 \", beta0, \"  B1 \", beta1, \"  B2 \", beta2, \"  B3 \", beta3)\n",
        "\n",
        "# Find the price of a new house\n",
        "new_house_plinth_area_str = input(\"Hello... Please type the Plinth area of the house.....\")\n",
        "new_house_plinth_area = float(new_house_plinth_area_str)\n",
        "\n",
        "new_house_land_area_str = input(\"Hello... Please type the Land area of the house......\")\n",
        "new_house_land_area = float(new_house_land_area_str)\n",
        "\n",
        "new_house_furnish_area_str = input(\"Hello... Please type the Furnish area of the house....\")\n",
        "new_house_furnish_area = float(new_house_furnish_area_str)\n",
        "\n",
        "m_plinth_area = train_house_plinth_area.mean()\n",
        "std_plinth_area = train_house_plinth_area.std()\n",
        "\n",
        "m_land_area = train_house_land_area.mean()\n",
        "std_land_area = train_house_land_area.std()\n",
        "\n",
        "m_furnish_area = train_house_furnish_area.mean()\n",
        "std_furnish_area = train_house_furnish_area.std()\n",
        "\n",
        "m_price = train_house_price.mean()\n",
        "std_price = train_house_price.std()\n",
        "\n",
        "new_house_plinth_area_n = (new_house_plinth_area - m_plinth_area)/std_plinth_area\n",
        "new_house_land_area_n = (new_house_land_area - m_land_area)/std_land_area\n",
        "new_house_furnish_area_n = (new_house_furnish_area - m_furnish_area)/std_furnish_area\n",
        "\n",
        "new_house_price_n = beta0 + beta1 * new_house_plinth_area_n + \\\n",
        "                            beta2 * new_house_land_area_n + \\\n",
        "                            beta3 * new_house_furnish_area_n\n",
        "new_house_price = std_price * new_house_price_n + m_price\n",
        "\n",
        "print ( \" Plinth Area..X1 = \", int(new_house_plinth_area), \\\n",
        "         \"Land Area...X2 = \", int(new_house_land_area),\"Furnish Area .. X3 = \", \\\n",
        "         int(new_house_furnish_area), \"Price of the house Y = \", int(new_house_price))\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of data points in Normalized Training Data House Plinth Area   80\n",
            "Number of data points in Normalized Training Data House Land Area   80\n",
            "Number of data points in Normalized Training Data House Furnish Area   80\n",
            "Number of data points in Normalized Training Data House price   80\n",
            " Normalized Training Data for House Plinth Area .. \n",
            "[-8.44661329e-01 -3.35438684e-01 -5.27863831e-01 -5.68930173e-01\n",
            "  6.81847948e-02  6.91219874e-01 -1.30695101e+00 -4.01144832e-01\n",
            " -1.46652308e+00 -1.14853760e-01  6.51326856e-01  1.57121292e+00\n",
            " -1.70118790e+00  1.23331026e-01 -9.51433819e-01  9.51697817e-01\n",
            " -7.61340654e-02  1.49377354e+00  1.00097743e+00 -4.28131285e-01\n",
            " -7.33195543e-01  8.73085105e-01 -4.64504332e-01 -1.31516428e+00\n",
            " -1.82908022e+00  8.44925327e-01 -9.77246949e-01  1.55361306e+00\n",
            " -1.29756442e+00 -5.84183386e-01  1.14764294e+00  5.48074338e-01\n",
            "  1.36940119e+00 -7.09729062e-01  2.65303238e-01 -1.63196178e+00\n",
            "  1.35414797e+00 -1.19431190e+00  3.74422376e-01 -3.67118434e-01\n",
            "  1.52427996e+00 -6.08808525e-02 -1.09575268e+00  5.72714144e-01\n",
            "  1.53483988e+00  7.44019457e-01 -3.31918712e-01  1.00332408e+00\n",
            " -1.14972559e+00  9.18844743e-01  5.64500875e-01 -1.57094893e+00\n",
            "  5.41034394e-01  1.45974714e+00  1.21100244e+00  1.60171935e+00\n",
            " -2.54479324e-01  6.56020152e-01 -2.22799574e-01 -1.19547056e-01\n",
            "  1.14529629e+00 -9.44393875e-01 -1.81382701e+00  7.89779096e-01\n",
            "  4.40128524e-01  5.99861929e-03 -6.55756154e-01  1.21217576e+00\n",
            " -5.29037155e-01 -9.37339264e-02 -1.03004653e+00  1.01975061e+00\n",
            "  1.40460091e+00 -1.04132511e-03 -1.66481485e+00 -1.61788189e+00\n",
            "  4.70634950e-01 -6.86262580e-01  8.64871836e-01 -8.97460912e-01]\n",
            " Normalized Training Data for House Land Area .. \n",
            "[-0.11559947  1.37413725 -0.92018451  0.32291174  1.22148871  0.16778973\n",
            " -0.55305062  1.5441001  -0.61064718  1.69604194  1.31442057 -1.31452658\n",
            " -1.35445548  0.38015495  0.24234723 -1.00392919 -1.50003696  0.78191743\n",
            " -1.40745845  0.41796373 -1.13042961 -1.37353655  1.04763897  0.9034709\n",
            " -0.16506891 -0.5389165   1.590036   -0.90675709 -0.732554   -0.57531187\n",
            " -0.3806143  -0.87283519  1.06884016 -0.18308992  1.35752965  0.42397073\n",
            "  0.97838176 -0.6926251   0.37626806  0.01372777  0.91937179  0.37026106\n",
            "  1.17060586  0.43421797 -0.89050285  0.80735886  1.63349843  0.8801496\n",
            " -1.60427613  1.04481215  0.77979732  0.07203103 -0.1643622  -0.19969751\n",
            "  1.15011138 -1.64455839 -1.16329145 -0.38556125  1.21724847  0.08934533\n",
            " -1.46258153  0.31831815  1.56706805 -1.41699898 -1.09332753  0.52467637\n",
            "  1.57166164  1.63915208 -1.15905121  0.3412861   1.0903947  -1.49791685\n",
            " -0.12407995 -0.33149822 -0.75410854 -0.72301347 -1.46505501 -0.65658309\n",
            " -1.37883685 -0.39757525]\n",
            " Normalized Training Data for House Furnish Area .. \n",
            "[-8.44661329e-01 -3.35438684e-01 -5.27863831e-01 -5.68930173e-01\n",
            "  6.81847948e-02  6.91219874e-01 -1.30695101e+00 -4.01144832e-01\n",
            " -1.46652308e+00 -1.14853760e-01  6.51326856e-01  1.57121292e+00\n",
            " -1.70118790e+00  1.23331026e-01 -9.51433819e-01  9.51697817e-01\n",
            " -7.61340654e-02  1.49377354e+00  1.00097743e+00 -4.28131285e-01\n",
            " -7.33195543e-01  8.73085105e-01 -4.64504332e-01 -1.31516428e+00\n",
            " -1.82908022e+00  8.44925327e-01 -9.77246949e-01  1.55361306e+00\n",
            " -1.29756442e+00 -5.84183386e-01  1.14764294e+00  5.48074338e-01\n",
            "  1.36940119e+00 -7.09729062e-01  2.65303238e-01 -1.63196178e+00\n",
            "  1.35414797e+00 -1.19431190e+00  3.74422376e-01 -3.67118434e-01\n",
            "  1.52427996e+00 -6.08808525e-02 -1.09575268e+00  5.72714144e-01\n",
            "  1.53483988e+00  7.44019457e-01 -3.31918712e-01  1.00332408e+00\n",
            " -1.14972559e+00  9.18844743e-01  5.64500875e-01 -1.57094893e+00\n",
            "  5.41034394e-01  1.45974714e+00  1.21100244e+00  1.60171935e+00\n",
            " -2.54479324e-01  6.56020152e-01 -2.22799574e-01 -1.19547056e-01\n",
            "  1.14529629e+00 -9.44393875e-01 -1.81382701e+00  7.89779096e-01\n",
            "  4.40128524e-01  5.99861929e-03 -6.55756154e-01  1.21217576e+00\n",
            " -5.29037155e-01 -9.37339264e-02 -1.03004653e+00  1.01975061e+00\n",
            "  1.40460091e+00 -1.04132511e-03 -1.66481485e+00 -1.61788189e+00\n",
            "  4.70634950e-01 -6.86262580e-01  8.64871836e-01 -8.97460912e-01]\n",
            " Normalized Training Data for House Price .. \n",
            "[-0.53939438  1.03366674 -1.05404185  0.06621075  1.20467386  0.43744291\n",
            " -1.10697396  1.26541295 -1.24076643  1.58445918  1.31116782 -0.61533333\n",
            " -2.03507161  0.54076232 -0.20078327 -0.39011737 -1.32785511  1.44781135\n",
            " -1.0097276   0.22316534 -1.34201117 -0.76967408  0.78042764  0.22396329\n",
            " -1.01014167  0.03580239  1.01973497  0.03918398 -1.26599459 -0.7654773\n",
            "  0.27869402 -0.47044288  1.52227517 -0.46872621  1.23290835 -0.37466733\n",
            "  1.51605116 -1.2338178   0.3715495  -0.11720989  1.29937973  0.16693791\n",
            "  0.57545805  0.75554886  0.00693386  0.96127328  1.38311271  1.35398969\n",
            " -1.98910107  1.46859686  1.06165537 -0.66581983  0.08931679  0.66428496\n",
            "  1.69246709 -0.64008702 -1.30600854  0.02963446  1.0081194   0.07349151\n",
            " -0.93988326 -0.20832713  0.57923645 -1.1774049  -0.72830577  0.53622479\n",
            "  1.02715806  2.04321997 -1.33730543  0.32013134  0.5384418  -1.06541156\n",
            "  0.49929481 -0.1895861  -1.46817352 -1.41744979 -1.16174783 -0.89122988\n",
            " -0.98799748 -0.7572045 ]\n",
            "Number of data points in Normalized Test Data House Plinth Area   20\n",
            "Number of data points in Normalized Test Data House Land Area   20\n",
            "Number of data points in Normalized Test Data House Furnish Area   20\n",
            "Number of data points in Normalized Test Data House price   20\n",
            " Normalized Test Data for House Plinth Area .. \n",
            "[-1.02332814  0.00225127 -0.32168174  1.33800592  1.86830551 -1.17091151\n",
            " -0.49427925 -0.24663934 -0.60309072  1.23920009 -0.6381105   1.2029296\n",
            " -1.11838184 -0.97705199 -0.11656585  0.98655736 -1.51235441  1.6194149\n",
            "  0.11731628 -0.15158564]\n",
            " Normalized Test Data for House Land Area .. \n",
            "[ 0.24377618  1.17314036  0.6072747  -1.566093   -1.12601376 -1.51931293\n",
            "  0.56292025  0.49638859  0.99884126  0.30545657  1.03730488  0.74033802\n",
            "  1.13640934  1.47738412 -1.39560561 -1.44030657 -1.08651059 -0.01680618\n",
            " -0.39693761 -0.23164801]\n",
            " Normalized Test Data for House Furnish Area .. \n",
            "[-0.77353253  0.55171516  0.56585652  0.9517137   1.50322683 -0.96545102\n",
            " -0.69272474 -0.43413983 -0.85434031  2.14968912 -0.27656465 -0.15333277\n",
            " -0.8967644  -0.71494688 -0.31696854  1.82241759 -1.40585345 -1.11090503\n",
            "  0.69918937  0.35171589]\n",
            " Normalized Test Data for House Price .. \n",
            "[-0.22069874  1.27252265  0.56406963 -1.00386796 -0.28962458 -2.12128384\n",
            "  0.31750425  0.37052927  0.70878096  1.01701634  0.80092554  1.20781666\n",
            "  0.65342643  1.07735927 -1.52132494 -0.91745647 -1.84938025  0.48207848\n",
            " -0.28885126 -0.25954143]\n",
            "iteration# 0200 Train Error.. =   0.000003058   B0  -0.00018306452   B1  -0.7261347   B2  0.91699344   B3  1.1880692\n",
            "iteration# 0400 Train Error.. =   0.000003058   B0  -0.00018306526   B1  -0.7261228   B2  0.9169934   B3  1.1880573\n",
            "iteration# 0600 Train Error.. =   0.000003058   B0  -0.00018306763   B1  -0.7261109   B2  0.91699344   B3  1.1880454\n",
            "iteration# 0800 Train Error.. =   0.000003058   B0  -0.00018306689   B1  -0.72609895   B2  0.9169934   B3  1.1880336\n",
            "iteration# 1000 Train Error.. =   0.000003058   B0  -0.00018306785   B1  -0.72608703   B2  0.9169934   B3  1.1880217\n",
            " Final Values  B0  -0.00018306785   B1  -0.72608703   B2  0.9169934   B3  1.1880217\n",
            " Final Values  B0  -0.00018306785   B1  -0.72608703   B2  0.9169934   B3  1.1880217\n",
            "Hello... Please type the Plinth area of the house.....200\n",
            "Hello... Please type the Land area of the house......4566\n",
            "Hello... Please type the Furnish area of the house....399\n",
            " Plinth Area..X1 =  200 Land Area...X2 =  4566 Furnish Area .. X3 =  399 Price of the house Y =  440868\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}